/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegistrationRouteImport } from './routes/registration'
import { Route as PendingApprovalRouteImport } from './routes/pending-approval'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HomeRouteRouteImport } from './routes/home/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as HomeLecturesLectureIdRouteImport } from './routes/home/lectures/$lectureId'
import { Route as HomeCoursesNewRouteImport } from './routes/home/courses/new'
import { Route as HomeAssignmentsAssignmentIdRouteImport } from './routes/home/assignments/$assignmentId'
import { Route as HomeCoursesCourseIdRouteRouteImport } from './routes/home/courses/$courseId/route'
import { Route as HomeCoursesCourseIdIndexRouteImport } from './routes/home/courses/$courseId/index'
import { Route as HomeCoursesCourseIdMembersMemberIdRouteImport } from './routes/home/courses/$courseId/members/$memberId'

const RegistrationRoute = RegistrationRouteImport.update({
  id: '/registration',
  path: '/registration',
  getParentRoute: () => rootRouteImport,
} as any)
const PendingApprovalRoute = PendingApprovalRouteImport.update({
  id: '/pending-approval',
  path: '/pending-approval',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRouteRoute = HomeRouteRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeLecturesLectureIdRoute = HomeLecturesLectureIdRouteImport.update({
  id: '/lectures/$lectureId',
  path: '/lectures/$lectureId',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeCoursesNewRoute = HomeCoursesNewRouteImport.update({
  id: '/courses/new',
  path: '/courses/new',
  getParentRoute: () => HomeRouteRoute,
} as any)
const HomeAssignmentsAssignmentIdRoute =
  HomeAssignmentsAssignmentIdRouteImport.update({
    id: '/assignments/$assignmentId',
    path: '/assignments/$assignmentId',
    getParentRoute: () => HomeRouteRoute,
  } as any)
const HomeCoursesCourseIdRouteRoute =
  HomeCoursesCourseIdRouteRouteImport.update({
    id: '/courses/$courseId',
    path: '/courses/$courseId',
    getParentRoute: () => HomeRouteRoute,
  } as any)
const HomeCoursesCourseIdIndexRoute =
  HomeCoursesCourseIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => HomeCoursesCourseIdRouteRoute,
  } as any)
const HomeCoursesCourseIdMembersMemberIdRoute =
  HomeCoursesCourseIdMembersMemberIdRouteImport.update({
    id: '/members/$memberId',
    path: '/members/$memberId',
    getParentRoute: () => HomeCoursesCourseIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/pending-approval': typeof PendingApprovalRoute
  '/registration': typeof RegistrationRoute
  '/home/': typeof HomeIndexRoute
  '/home/courses/$courseId': typeof HomeCoursesCourseIdRouteRouteWithChildren
  '/home/assignments/$assignmentId': typeof HomeAssignmentsAssignmentIdRoute
  '/home/courses/new': typeof HomeCoursesNewRoute
  '/home/lectures/$lectureId': typeof HomeLecturesLectureIdRoute
  '/home/courses/$courseId/': typeof HomeCoursesCourseIdIndexRoute
  '/home/courses/$courseId/members/$memberId': typeof HomeCoursesCourseIdMembersMemberIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/pending-approval': typeof PendingApprovalRoute
  '/registration': typeof RegistrationRoute
  '/home': typeof HomeIndexRoute
  '/home/assignments/$assignmentId': typeof HomeAssignmentsAssignmentIdRoute
  '/home/courses/new': typeof HomeCoursesNewRoute
  '/home/lectures/$lectureId': typeof HomeLecturesLectureIdRoute
  '/home/courses/$courseId': typeof HomeCoursesCourseIdIndexRoute
  '/home/courses/$courseId/members/$memberId': typeof HomeCoursesCourseIdMembersMemberIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/pending-approval': typeof PendingApprovalRoute
  '/registration': typeof RegistrationRoute
  '/home/': typeof HomeIndexRoute
  '/home/courses/$courseId': typeof HomeCoursesCourseIdRouteRouteWithChildren
  '/home/assignments/$assignmentId': typeof HomeAssignmentsAssignmentIdRoute
  '/home/courses/new': typeof HomeCoursesNewRoute
  '/home/lectures/$lectureId': typeof HomeLecturesLectureIdRoute
  '/home/courses/$courseId/': typeof HomeCoursesCourseIdIndexRoute
  '/home/courses/$courseId/members/$memberId': typeof HomeCoursesCourseIdMembersMemberIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/login'
    | '/pending-approval'
    | '/registration'
    | '/home/'
    | '/home/courses/$courseId'
    | '/home/assignments/$assignmentId'
    | '/home/courses/new'
    | '/home/lectures/$lectureId'
    | '/home/courses/$courseId/'
    | '/home/courses/$courseId/members/$memberId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/pending-approval'
    | '/registration'
    | '/home'
    | '/home/assignments/$assignmentId'
    | '/home/courses/new'
    | '/home/lectures/$lectureId'
    | '/home/courses/$courseId'
    | '/home/courses/$courseId/members/$memberId'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/login'
    | '/pending-approval'
    | '/registration'
    | '/home/'
    | '/home/courses/$courseId'
    | '/home/assignments/$assignmentId'
    | '/home/courses/new'
    | '/home/lectures/$lectureId'
    | '/home/courses/$courseId/'
    | '/home/courses/$courseId/members/$memberId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRouteRoute: typeof HomeRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  PendingApprovalRoute: typeof PendingApprovalRoute
  RegistrationRoute: typeof RegistrationRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/registration': {
      id: '/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof RegistrationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pending-approval': {
      id: '/pending-approval'
      path: '/pending-approval'
      fullPath: '/pending-approval'
      preLoaderRoute: typeof PendingApprovalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/'
      fullPath: '/home/'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/lectures/$lectureId': {
      id: '/home/lectures/$lectureId'
      path: '/lectures/$lectureId'
      fullPath: '/home/lectures/$lectureId'
      preLoaderRoute: typeof HomeLecturesLectureIdRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/courses/new': {
      id: '/home/courses/new'
      path: '/courses/new'
      fullPath: '/home/courses/new'
      preLoaderRoute: typeof HomeCoursesNewRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/assignments/$assignmentId': {
      id: '/home/assignments/$assignmentId'
      path: '/assignments/$assignmentId'
      fullPath: '/home/assignments/$assignmentId'
      preLoaderRoute: typeof HomeAssignmentsAssignmentIdRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/courses/$courseId': {
      id: '/home/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/home/courses/$courseId'
      preLoaderRoute: typeof HomeCoursesCourseIdRouteRouteImport
      parentRoute: typeof HomeRouteRoute
    }
    '/home/courses/$courseId/': {
      id: '/home/courses/$courseId/'
      path: '/'
      fullPath: '/home/courses/$courseId/'
      preLoaderRoute: typeof HomeCoursesCourseIdIndexRouteImport
      parentRoute: typeof HomeCoursesCourseIdRouteRoute
    }
    '/home/courses/$courseId/members/$memberId': {
      id: '/home/courses/$courseId/members/$memberId'
      path: '/members/$memberId'
      fullPath: '/home/courses/$courseId/members/$memberId'
      preLoaderRoute: typeof HomeCoursesCourseIdMembersMemberIdRouteImport
      parentRoute: typeof HomeCoursesCourseIdRouteRoute
    }
  }
}

interface HomeCoursesCourseIdRouteRouteChildren {
  HomeCoursesCourseIdIndexRoute: typeof HomeCoursesCourseIdIndexRoute
  HomeCoursesCourseIdMembersMemberIdRoute: typeof HomeCoursesCourseIdMembersMemberIdRoute
}

const HomeCoursesCourseIdRouteRouteChildren: HomeCoursesCourseIdRouteRouteChildren =
  {
    HomeCoursesCourseIdIndexRoute: HomeCoursesCourseIdIndexRoute,
    HomeCoursesCourseIdMembersMemberIdRoute:
      HomeCoursesCourseIdMembersMemberIdRoute,
  }

const HomeCoursesCourseIdRouteRouteWithChildren =
  HomeCoursesCourseIdRouteRoute._addFileChildren(
    HomeCoursesCourseIdRouteRouteChildren,
  )

interface HomeRouteRouteChildren {
  HomeIndexRoute: typeof HomeIndexRoute
  HomeCoursesCourseIdRouteRoute: typeof HomeCoursesCourseIdRouteRouteWithChildren
  HomeAssignmentsAssignmentIdRoute: typeof HomeAssignmentsAssignmentIdRoute
  HomeCoursesNewRoute: typeof HomeCoursesNewRoute
  HomeLecturesLectureIdRoute: typeof HomeLecturesLectureIdRoute
}

const HomeRouteRouteChildren: HomeRouteRouteChildren = {
  HomeIndexRoute: HomeIndexRoute,
  HomeCoursesCourseIdRouteRoute: HomeCoursesCourseIdRouteRouteWithChildren,
  HomeAssignmentsAssignmentIdRoute: HomeAssignmentsAssignmentIdRoute,
  HomeCoursesNewRoute: HomeCoursesNewRoute,
  HomeLecturesLectureIdRoute: HomeLecturesLectureIdRoute,
}

const HomeRouteRouteWithChildren = HomeRouteRoute._addFileChildren(
  HomeRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRouteRoute: HomeRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  PendingApprovalRoute: PendingApprovalRoute,
  RegistrationRoute: RegistrationRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
